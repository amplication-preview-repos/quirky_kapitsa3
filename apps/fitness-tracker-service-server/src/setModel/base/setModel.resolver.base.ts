/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SetModel } from "./SetModel";
import { SetModelCountArgs } from "./SetModelCountArgs";
import { SetModelFindManyArgs } from "./SetModelFindManyArgs";
import { SetModelFindUniqueArgs } from "./SetModelFindUniqueArgs";
import { DeleteSetModelArgs } from "./DeleteSetModelArgs";
import { SetModelService } from "../setModel.service";
@graphql.Resolver(() => SetModel)
export class SetModelResolverBase {
  constructor(protected readonly service: SetModelService) {}

  async _setModelsMeta(
    @graphql.Args() args: SetModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SetModel])
  async setModels(
    @graphql.Args() args: SetModelFindManyArgs
  ): Promise<SetModel[]> {
    return this.service.setModels(args);
  }

  @graphql.Query(() => SetModel, { nullable: true })
  async setModel(
    @graphql.Args() args: SetModelFindUniqueArgs
  ): Promise<SetModel | null> {
    const result = await this.service.setModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SetModel)
  async deleteSetModel(
    @graphql.Args() args: DeleteSetModelArgs
  ): Promise<SetModel | null> {
    try {
      return await this.service.deleteSetModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
