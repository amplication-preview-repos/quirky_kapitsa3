/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SetModelService } from "../setModel.service";
import { SetModelCreateInput } from "./SetModelCreateInput";
import { SetModel } from "./SetModel";
import { SetModelFindManyArgs } from "./SetModelFindManyArgs";
import { SetModelWhereUniqueInput } from "./SetModelWhereUniqueInput";
import { SetModelUpdateInput } from "./SetModelUpdateInput";

export class SetModelControllerBase {
  constructor(protected readonly service: SetModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SetModel })
  async createSetModel(
    @common.Body() data: SetModelCreateInput
  ): Promise<SetModel> {
    return await this.service.createSetModel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SetModel] })
  @ApiNestedQuery(SetModelFindManyArgs)
  async setModels(@common.Req() request: Request): Promise<SetModel[]> {
    const args = plainToClass(SetModelFindManyArgs, request.query);
    return this.service.setModels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SetModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async setModel(
    @common.Param() params: SetModelWhereUniqueInput
  ): Promise<SetModel | null> {
    const result = await this.service.setModel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SetModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSetModel(
    @common.Param() params: SetModelWhereUniqueInput,
    @common.Body() data: SetModelUpdateInput
  ): Promise<SetModel | null> {
    try {
      return await this.service.updateSetModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SetModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSetModel(
    @common.Param() params: SetModelWhereUniqueInput
  ): Promise<SetModel | null> {
    try {
      return await this.service.deleteSetModel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
